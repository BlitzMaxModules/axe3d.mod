// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgAnimation/CubicBezier>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(osgAnimation::TemplateCubicBezier< float >, osgAnimation::FloatCubicBezier)

TYPE_NAME_ALIAS(osgAnimation::TemplateCubicBezier< double >, osgAnimation::DoubleCubicBezier)

TYPE_NAME_ALIAS(osgAnimation::TemplateCubicBezier< osg::Vec2 >, osgAnimation::Vec2CubicBezier)

TYPE_NAME_ALIAS(osgAnimation::TemplateCubicBezier< osg::Vec3 >, osgAnimation::Vec3CubicBezier)

TYPE_NAME_ALIAS(osgAnimation::TemplateCubicBezier< osg::Vec4 >, osgAnimation::Vec4CubicBezier)

BEGIN_VALUE_REFLECTOR(osgAnimation::TemplateCubicBezier< double >)
	I_DeclaringFile("osgAnimation/CubicBezier");
	I_Method0(const T &, getP0,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP0,
	          "",
	          "");
	I_Method0(const T &, getP1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP1,
	          "",
	          "");
	I_Method0(const T &, getP2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP2,
	          "",
	          "");
	I_Constructor3(IN, const T &, v0, IN, const T &, v1, IN, const T &, v2,
	               ____TemplateCubicBezier__C5_T_R1__C5_T_R1__C5_T_R1,
	               "",
	               "");
	I_Constructor0(____TemplateCubicBezier,
	               "",
	               "");
	I_Method0(const T &, getPosition,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getPosition,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint1,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint2,
	          "",
	          "");
	I_SimpleProperty(const T &, P0, 
	                 __C5_T_R1__getP0, 
	                 0);
	I_SimpleProperty(const T &, P1, 
	                 __C5_T_R1__getP1, 
	                 0);
	I_SimpleProperty(const T &, P2, 
	                 __C5_T_R1__getP2, 
	                 0);
	I_SimpleProperty(const T &, Position, 
	                 __C5_T_R1__getPosition, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint1, 
	                 __C5_T_R1__getTangentPoint1, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint2, 
	                 __C5_T_R1__getTangentPoint2, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgAnimation::TemplateCubicBezier< float >)
	I_DeclaringFile("osgAnimation/CubicBezier");
	I_Method0(const T &, getP0,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP0,
	          "",
	          "");
	I_Method0(const T &, getP1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP1,
	          "",
	          "");
	I_Method0(const T &, getP2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP2,
	          "",
	          "");
	I_Constructor3(IN, const T &, v0, IN, const T &, v1, IN, const T &, v2,
	               ____TemplateCubicBezier__C5_T_R1__C5_T_R1__C5_T_R1,
	               "",
	               "");
	I_Constructor0(____TemplateCubicBezier,
	               "",
	               "");
	I_Method0(const T &, getPosition,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getPosition,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint1,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint2,
	          "",
	          "");
	I_SimpleProperty(const T &, P0, 
	                 __C5_T_R1__getP0, 
	                 0);
	I_SimpleProperty(const T &, P1, 
	                 __C5_T_R1__getP1, 
	                 0);
	I_SimpleProperty(const T &, P2, 
	                 __C5_T_R1__getP2, 
	                 0);
	I_SimpleProperty(const T &, Position, 
	                 __C5_T_R1__getPosition, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint1, 
	                 __C5_T_R1__getTangentPoint1, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint2, 
	                 __C5_T_R1__getTangentPoint2, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgAnimation::TemplateCubicBezier< osg::Vec2 >)
	I_DeclaringFile("osgAnimation/CubicBezier");
	I_Method0(const T &, getP0,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP0,
	          "",
	          "");
	I_Method0(const T &, getP1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP1,
	          "",
	          "");
	I_Method0(const T &, getP2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP2,
	          "",
	          "");
	I_Constructor3(IN, const T &, v0, IN, const T &, v1, IN, const T &, v2,
	               ____TemplateCubicBezier__C5_T_R1__C5_T_R1__C5_T_R1,
	               "",
	               "");
	I_Constructor0(____TemplateCubicBezier,
	               "",
	               "");
	I_Method0(const T &, getPosition,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getPosition,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint1,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint2,
	          "",
	          "");
	I_SimpleProperty(const T &, P0, 
	                 __C5_T_R1__getP0, 
	                 0);
	I_SimpleProperty(const T &, P1, 
	                 __C5_T_R1__getP1, 
	                 0);
	I_SimpleProperty(const T &, P2, 
	                 __C5_T_R1__getP2, 
	                 0);
	I_SimpleProperty(const T &, Position, 
	                 __C5_T_R1__getPosition, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint1, 
	                 __C5_T_R1__getTangentPoint1, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint2, 
	                 __C5_T_R1__getTangentPoint2, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgAnimation::TemplateCubicBezier< osg::Vec3 >)
	I_DeclaringFile("osgAnimation/CubicBezier");
	I_Method0(const T &, getP0,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP0,
	          "",
	          "");
	I_Method0(const T &, getP1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP1,
	          "",
	          "");
	I_Method0(const T &, getP2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP2,
	          "",
	          "");
	I_Constructor3(IN, const T &, v0, IN, const T &, v1, IN, const T &, v2,
	               ____TemplateCubicBezier__C5_T_R1__C5_T_R1__C5_T_R1,
	               "",
	               "");
	I_Constructor0(____TemplateCubicBezier,
	               "",
	               "");
	I_Method0(const T &, getPosition,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getPosition,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint1,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint2,
	          "",
	          "");
	I_SimpleProperty(const T &, P0, 
	                 __C5_T_R1__getP0, 
	                 0);
	I_SimpleProperty(const T &, P1, 
	                 __C5_T_R1__getP1, 
	                 0);
	I_SimpleProperty(const T &, P2, 
	                 __C5_T_R1__getP2, 
	                 0);
	I_SimpleProperty(const T &, Position, 
	                 __C5_T_R1__getPosition, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint1, 
	                 __C5_T_R1__getTangentPoint1, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint2, 
	                 __C5_T_R1__getTangentPoint2, 
	                 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgAnimation::TemplateCubicBezier< osg::Vec4 >)
	I_DeclaringFile("osgAnimation/CubicBezier");
	I_Method0(const T &, getP0,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP0,
	          "",
	          "");
	I_Method0(const T &, getP1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP1,
	          "",
	          "");
	I_Method0(const T &, getP2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getP2,
	          "",
	          "");
	I_Constructor3(IN, const T &, v0, IN, const T &, v1, IN, const T &, v2,
	               ____TemplateCubicBezier__C5_T_R1__C5_T_R1__C5_T_R1,
	               "",
	               "");
	I_Constructor0(____TemplateCubicBezier,
	               "",
	               "");
	I_Method0(const T &, getPosition,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getPosition,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint1,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint1,
	          "",
	          "");
	I_Method0(const T &, getTangentPoint2,
	          Properties::NON_VIRTUAL,
	          __C5_T_R1__getTangentPoint2,
	          "",
	          "");
	I_SimpleProperty(const T &, P0, 
	                 __C5_T_R1__getP0, 
	                 0);
	I_SimpleProperty(const T &, P1, 
	                 __C5_T_R1__getP1, 
	                 0);
	I_SimpleProperty(const T &, P2, 
	                 __C5_T_R1__getP2, 
	                 0);
	I_SimpleProperty(const T &, Position, 
	                 __C5_T_R1__getPosition, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint1, 
	                 __C5_T_R1__getTangentPoint1, 
	                 0);
	I_SimpleProperty(const T &, TangentPoint2, 
	                 __C5_T_R1__getTangentPoint2, 
	                 0);
END_REFLECTOR

